<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>40-Studies on</title><link>https://mydaidai.github.io/knowledge-blog/40-study/</link><description>Recent content in 40-Studies on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://mydaidai.github.io/knowledge-blog/40-study/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/Git/cherry-pick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/Git/cherry-pick/</guid><description>将其他分支提交的记录合并到当前分支 在开发过程中，有时会遇到多个人在同一个分支进行开发，但是分批进行上线的情况，这时就需要新建一个单独的分支，然后将开发分支相关的记录合并到该分支中
要将 A 分支的一个 commit 合并到 B 分支：
切换到A分支git checkout A，查看该分支需要进行合并的记录git log 切换到B分支git checkout B 在B分支上运行命令git cherry-pick commit_A</description></item><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/Git/git-rebase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/Git/git-rebase/</guid><description>变基 在Git中整合来自不同分支的修改主要有两种方法：merge和rebase，那么两种有什么区别呢 x
使用场景 删除某个中间的提交记录 在做项目时，有可能会遇到想删除某个中间的提交记录，这个提交记录之后也有人提交，但是不能删除掉之后提交的代码记录
git log获取commit信息 git rebase -i (commit-id), commit-id 为要删除的commit的下一个commit号 编辑文件，将要删除的commit之前的单词改为drop 保存文件退出大功告成 git log查看 比如我的提交历史如下，我现在想删除commit_B，但是不影响commit_B之后的提交历史</description></item><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/React/CPU%E7%93%B6%E9%A2%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/React/CPU%E7%93%B6%E9%A2%88/</guid><description>CPU瓶颈 主浏览器的刷新频率为60Hz，也就是每1000ms/60Hz（16.6ms）刷新一次，我们知道，在浏览器中，[[js线程]] 与[[GUI渲染线程]]是互斥的，不能同时执行 [[2023-05-16#💼 工作记录 WORK]]
也就是说，如果在浏览器的一个刷新周期内，只执行了[[js线程]]，而未执行[[GUI渲染线程]]，那么就会出现页面掉帧现象，造成卡顿
例如下面的🌰
1 2 3 4 5 6 7 8 9 10 11 function App() { const len = 3000; return ( &amp;lt;ul&amp;gt; {Array(len).</description></item><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/React/js%E7%BA%BF%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/React/js%E7%BA%BF%E7%A8%8B/</guid><description>✍内容</description></item><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/React/React%E7%90%86%E5%BF%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/React/React%E7%90%86%E5%BF%B5/</guid><description>官网介绍：用户构建用户界面的javaScript库
声明性的 基于组件 一次学习，随处写作 我们认为，React是JavaScript构建快速响应的大型web应用程序的首选方式
那么，React是如克实现快速响应的呢? 是什么影响了页面的快速响应呢？一般情况下，有两类场景会被制约：
CPU瓶颈：浏览器遇到大量计算的操作、性能不足造成的js脚本时间执行过长，导致交互卡顿，页面掉帧的情况 网络瓶颈：发送网络情况后，没有及时返回，导致的响应不及时问题 ![[CPU瓶颈]]
![[网络瓶颈]]</description></item><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/React/%E7%BD%91%E7%BB%9C%E7%93%B6%E9%A2%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/React/%E7%BD%91%E7%BB%9C%E7%93%B6%E9%A2%88/</guid><description>✍内容</description></item><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/React/%E9%A6%96%E9%A1%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/React/%E9%A6%96%E9%A1%B5/</guid><description>✍内容 - 其他人笔记
react技术揭秘</description></item><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid><description>✍内容 知识库项目导出为html文件，上传服务器 📅2023-05-17 建立个人博客，个人知识库 📅2023-05-17</description></item><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/%E9%A6%96%E9%A1%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/%E9%A6%96%E9%A1%B5/</guid><description>✍内容</description></item></channel></rss>