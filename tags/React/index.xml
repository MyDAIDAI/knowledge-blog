<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on</title><link>https://mydaidai.github.io/knowledge-blog/tags/React/</link><description>Recent content in React on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://mydaidai.github.io/knowledge-blog/tags/React/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/React/CPU%E7%93%B6%E9%A2%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/React/CPU%E7%93%B6%E9%A2%88/</guid><description>CPU瓶颈 主浏览器的刷新频率为60Hz，也就是每1000ms/60Hz（16.6ms）刷新一次，我们知道，在浏览器中，[[js线程]] 与[[GUI渲染线程]]是互斥的，不能同时执行 [[2023-05-16#💼 工作记录 WORK]]
也就是说，如果在浏览器的一个刷新周期内，只执行了[[js线程]]，而未执行[[GUI渲染线程]]，那么就会出现页面掉帧现象，造成卡顿
例如下面的🌰
1 2 3 4 5 6 7 8 9 10 11 function App() { const len = 3000; return ( &amp;lt;ul&amp;gt; {Array(len).</description></item><item><title/><link>https://mydaidai.github.io/knowledge-blog/40-Study/React/React%E7%90%86%E5%BF%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mydaidai.github.io/knowledge-blog/40-Study/React/React%E7%90%86%E5%BF%B5/</guid><description>官网介绍：用户构建用户界面的javaScript库
声明性的 基于组件 一次学习，随处写作 我们认为，React是JavaScript构建快速响应的大型web应用程序的首选方式
那么，React是如克实现快速响应的呢? 是什么影响了页面的快速响应呢？一般情况下，有两类场景会被制约：
CPU瓶颈：浏览器遇到大量计算的操作、性能不足造成的js脚本时间执行过长，导致交互卡顿，页面掉帧的情况 网络瓶颈：发送网络情况后，没有及时返回，导致的响应不及时问题 ![[CPU瓶颈]]
![[网络瓶颈]]</description></item></channel></rss>